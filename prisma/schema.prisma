// prisma/schema.prisma - Updated with enhanced campaign tracking

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contacts Contact[]
  groups   Group[]
  campaigns Campaign[]
  emailTemplates EmailTemplate[]
}

model Contact {
  id        String   @id @default(cuid())
  email     String
  name      String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  groups GroupContact[]

  @@unique([email, userId])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts GroupContact[]
}

model GroupContact {
  id        String @id @default(cuid())
  groupId   String
  contactId String

  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([groupId, contactId])
}

model Campaign {
  id              String    @id @default(cuid())
  subject         String
  content         String
  sentAt          DateTime?
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Enhanced tracking fields
  recipientCount  Int       @default(0)
  successCount    Int       @default(0)
  failureCount    Int       @default(0)
  isPersonalized  Boolean   @default(false)
  templateUsed    Boolean   @default(false)
  templateType    String?   // 'basic', 'newsletter', 'promotional'
  
  // Email provider tracking
  emailProvider   String?   @default("resend")
  campaignTags    String?   // JSON string of tags
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  subject     String
  content     String
  templateType String  // 'welcome', 'newsletter', 'promotional', 'custom'
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailAnalytics {
  id            String   @id @default(cuid())
  campaignId    String
  recipientEmail String
  emailId       String?  // Provider's email ID
  status        String   // 'sent', 'delivered', 'opened', 'clicked', 'bounced', 'complained'
  timestamp     DateTime @default(now())
  metadata      String?  // JSON string for additional data
  
  @@index([campaignId])
  @@index([recipientEmail])
  @@index([status])
}